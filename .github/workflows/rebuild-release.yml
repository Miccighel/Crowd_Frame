name: Rebuild Release (existing tag)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Git tag to rebuild (e.g., v1.3.0)"
        required: true
        type: string
      make_latest:
        description: "Mark this release as the latest"
        required: false
        default: true
        type: boolean

permissions:
  contents: write

concurrency:
  group: rebuild-release-${{ inputs.tag || github.run_id }}
  cancel-in-progress: false

jobs:
  recreate_release:
    name: Recreate GitHub Release for ${{ inputs.tag }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (fetch tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify tag exists
        run: |
          git fetch --tags --force
          git rev-parse --verify "refs/tags/${{ inputs.tag }}" >/dev/null || {
            echo "::error title=Tag not found::Tag '${{ inputs.tag }}' does not exist";
            exit 1;
          }

      - name: Delete existing release if present
        uses: actions/github-script@v7
        env:
          TAG: ${{ inputs.tag }}
        with:
          script: |
            const tag = process.env.TAG;
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: rel.data.id
              });
              core.notice(`Deleted existing release for ${tag}`);
            } catch (e) {
              if (e.status === 404) {
                core.notice(`No existing release found for ${tag}; will create fresh.`);
              } else {
                throw e;
              }
            }

      - name: Create GitHub Release (source-only)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          name: Crowd_Frame ${{ inputs.tag }}
          generate_release_notes: true
          make_latest: ${{ inputs.make_latest && 'true' || 'false' }}
          # No files attached: GitHub auto-adds "Source code (zip/tar.gz)"
