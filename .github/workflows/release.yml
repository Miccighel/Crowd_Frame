name: Release (Crowd_Frame)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: app-release-${{ github.ref }}
  cancel-in-progress: false

env:
  APP_NAME: Crowd_Frame
  NODE_VERSION: "20"

jobs:
  build:
    name: Build production (en-US)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Enable Corepack (Yarn 4)
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Derive version from tag
        id: ver
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version: $VERSION"

      - name: Prepare Angular environment files
        shell: bash
        run: |
          mkdir -p data/build/environments
          cat > data/build/environments/environment.ts <<'EOF'
          export const environment = {
            production: false,
            configuration_local: false,
            platform: 'none',
            taskName: '',
            batchName: '',
            taskTitle: 'none',
            region: '',
            bucket: '',
            bucket_deploy: '',
            websiteEndpoint: '',
            cloudfrontEndpoint: '',
            languageCode: 'en-US',
            aws_id_key: '',
            aws_secret_key: '',
            prolific_completion_code: false,
            bing_api_key: '',
            pubmed_api_key: '',
            log_on_console: true,
            log_server_config: 'none',
            table_acl_name: '',
            table_data_name: '',
            table_log_name: '',
            api_gateway_endpoint: '',
            hit_solver_endpoint: null
          };
          EOF
          cat > data/build/environments/environment.prod.ts <<'EOF'
          export const environment = {
            production: true,
            configuration_local: false,
            platform: 'none',
            taskName: '',
            batchName: '',
            taskTitle: 'none',
            region: '',
            bucket: '',
            bucket_deploy: '',
            websiteEndpoint: '',
            cloudfrontEndpoint: '',
            languageCode: 'en-US',
            aws_id_key: '',
            aws_secret_key: '',
            prolific_completion_code: false,
            bing_api_key: '',
            pubmed_api_key: '',
            log_on_console: false,
            log_server_config: 'none',
            table_acl_name: '',
            table_data_name: '',
            table_log_name: '',
            api_gateway_endpoint: '',
            hit_solver_endpoint: null
          };
          EOF

      - name: Compute base href
        id: base
        shell: bash
        run: |
          TASK="${{ vars.TASK_NAME }}"
          BATCH="${{ vars.BATCH_NAME }}"
          : "${TASK:=task}"
          : "${BATCH:=batch}"
          echo "href=/${TASK}/${BATCH}/" >> "$GITHUB_OUTPUT"
          echo "Base href: /${TASK}/${BATCH}/"

      - name: Build (production, en-US)
        run: yarn ng build ${{ env.APP_NAME }} --configuration production --base-href "${{ steps.base.outputs.href }}"

      - name: Locate build output
        id: out
        shell: bash
        run: |
          ROOT="dist/${{ env.APP_NAME }}"
          for p in "$ROOT/en-US" "$ROOT/browser/en-US" "$ROOT"; do
            if [ -d "$p" ]; then echo "pack_dir=$p" >> "$GITHUB_OUTPUT"; echo "Using: $p"; break; fi
          done

      - name: Create ZIP
        if: ${{ steps.out.outputs.pack_dir }}
        shell: bash
        run: |
          mkdir -p release
          ZIP="release/${{ env.APP_NAME }}-v${{ steps.ver.outputs.version }}-en-US.zip"
          cd "${{ steps.out.outputs.pack_dir }}"
          zip -r "../../$ZIP" . >/dev/null
          cd - >/dev/null
          ls -lh "$ZIP"

      - name: Upload artifact (ZIP)
        if: ${{ steps.out.outputs.pack_dir }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-v${{ steps.ver.outputs.version }}-en-US
          path: release/${{ env.APP_NAME }}-v${{ steps.ver.outputs.version }}-en-US.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          merge-multiple: true

      - name: Derive version from tag
        id: ver
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: List assets
        run: ls -lh release-assets || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Crowd_Frame v${{ steps.ver.outputs.version }}
          generate_release_notes: true
          prerelease: ${{ contains(steps.ver.outputs.version, '-') }}
          fail_on_unmatched_files: false
          files: |
            release-assets/Crowd_Frame-v${{ steps.ver.outputs.version }}-en-US.zip
