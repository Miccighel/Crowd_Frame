name: App Release (Crowd_Frame)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: app-release-${{ github.ref }}
  cancel-in-progress: false

env:
  APP_NAME: Crowd_Frame
  NODE_VERSION: "20"

jobs:
  build:
    name: Build production (en-US)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Enable Corepack (Yarn 4)
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Derive version from tag
        id: ver
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version: $VERSION"

      - name: Prepare Angular environment files
        shell: bash
        run: |
          mkdir -p data/build/environments
          cat > data/build/environments/environment.ts <<'EOF'
          export const environment = {
            production: false,
            configuration_local: false,
            platform: 'none',
            taskName: '',
            batchName: '',
            taskTitle: 'none',
            region: '',
            bucket: '',
            bucket_deploy: '',
            websiteEndpoint: '',
            cloudfrontEndpoint: '',
            languageCode: 'en-US',
            aws_id_key: '',
            aws_secret_key: '',
            prolific_completion_code: false,
            bing_api_key: '',
            pubmed_api_key: '',
            log_on_console: true,
            log_server_config: 'none',
            table_acl_name: '',
            table_data_name: '',
            table_log_name: '',
            api_gateway_endpoint: '',
            hit_solver_endpoint: null
          };
          EOF
          cat > data/build/environments/environment.prod.ts <<'EOF'
          export const environment = {
            production: true,
            configuration_local: false,
            platform: 'none',
            taskName: '',
            batchName: '',
            taskTitle: 'none',
            region: '',
            bucket: '',
            bucket_deploy: '',
            websiteEndpoint: '',
            cloudfrontEndpoint: '',
            languageCode: 'en-US',
            aws_id_key: '',
            aws_secret_key: '',
            prolific_completion_code: false,
            bing_api_key: '',
            pubmed_api_key: '',
            log_on_console: false,
            log_server_config: 'none',
            table_acl_name: '',
            table_data_name: '',
            table_log_name: '',
            api_gateway_endpoint: '',
            hit_solver_endpoint: null
          };
          EOF

      - name: Prepare build data stubs
        shell: bash
        run: |
          mkdir -p data/build/skeleton data/build/task data/build/config

          cat > data/build/skeleton/goldChecker.ts <<'EOF'
          export class GoldChecker {
            static performGoldCheck(_goldConfiguration: Array<object>, _taskType: string | null = null): boolean[] {
              return [true];
            }
          }
          EOF

          cat > data/build/skeleton/document.ts <<'EOF'
          export class Document {
            index: number;
            params: any;
            [key: string]: any;
            constructor(index: number, data: any = {}, params: any = {}) {
              this.index = index;
              this.params = params || {};
              for (const k in (data || {})) (this as any)[k] = (data as any)[k];
            }
          }
          EOF

          cat > data/build/task/hits.json <<'EOF'
          [
            {
              "unit_id": "unit_0",
              "token_input": "ABCDEFGHILM",
              "token_output": "MNOPQRSTUVZ",
              "documents_number": 1,
              "documents_params": {
                "identifier_1": {
                  "task_type": "Main",
                  "allow_back": true,
                  "check_gold": {"message": null, "jump": null},
                  "reset_jump": false
                }
              },
              "documents": [
                { "id": "identifier_1", "text": "Lorem ipsum dolor sit amet" }
              ]
            }
          ]
          EOF

          cat > data/build/task/dimensions.json <<'EOF'
          [
            {
              "name": "sample-dimension",
              "name_pretty": "Sample Dimension",
              "description": "Example dimension",
              "task_type": ["Main"],
              "example": false,
              "gold": false,
              "pairwise": false,
              "url": false,
              "justification": false,
              "scale": {
                "type": "categorical",
                "multiple_selection": false,
                "instructions": {"label":"Label","caption":"Caption","text":"Instruction text"},
                "mapping": [
                  {"label":"False","description":"...","value":"0"},
                  {"label":"True","description":"...","value":"1"}
                ]
              },
              "style": {"type":"list","position":"middle","orientation":"vertical","separator":false}
            }
          ]
          EOF

          cat > data/build/task/instructions_evaluation.json <<'EOF'
          {
            "instructions": [
              {
                "caption": "Evaluation Instructions",
                "text": "<p>Lorem ipsum <strong>dolor</strong> sit amet.</p>",
                "task_type": ["Main"]
              }
            ],
            "element": {"label":"Label","caption":"Caption","text":"Instruction text"}
          }
          EOF

          cat > data/build/task/instructions_general.json <<'EOF'
          [
            { "caption": "Task Instructions", "text": "<p>Lorem ipsum <strong>dolor</strong> sit amet.</p>" }
          ]
          EOF

          cat > data/build/task/questionnaires.json <<'EOF'
          [
            {
              "type": "standard",
              "name": "questionnaire_1",
              "description": "Standard questionnaire",
              "caption": false,
              "position": "start",
              "allow_back": false,
              "questions": [
                {
                  "index": 0,
                  "name": "age",
                  "text": "What is your age range?",
                  "type": "mcq",
                  "required": true,
                  "free_text": false,
                  "show_detail": false,
                  "detail": null,
                  "answers": ["0-18","19-25","26-35","36-50","50-80","80"]
                }
              ]
            },
            {
              "type": "crt",
              "name": "questionnaire_2",
              "description": "CRT questionnaire",
              "caption": false,
              "position": "start",
              "allow_back": false,
              "questions": [
                { "index": 0, "name": "farmers", "text": "If three farmers can plant three trees in three hours, how long would it take nine farmers to plant nine trees?" }
              ]
            }
          ]
          EOF

          cat > data/build/task/search_engine.json <<'EOF'
          { "source": "FakerWebSearch", "domains_filter": [] }
          EOF

          cat > data/build/task/task.json <<'EOF'
          {
            "modality": "pointwise",
            "allowed_tries": 10,
            "time_assessment": 2,
            "time_check_amount": 3,
            "attributes": [
              {"name":"id","name_pretty":false,"show":false,"annotate":false,"required":false},
              {"name":"text","name_pretty":false,"show":true,"required":false,"annotate":false}
            ],
            "element_labels": {"main":"Element","main_short":"E"},
            "annotator": false,
            "countdown_time": false,
            "countdown_behavior": false,
            "additional_times": false,
            "countdown_modality": false,
            "countdown_attribute": false,
            "countdown_attribute_values": [],
            "countdown_position_values": [],
            "logger": false,
            "logger_option": {
              "button":{"general":false,"click":false},
              "mouse":{"general":false,"mouseMovements":false,"leftClicks":false,"rightClicks":false},
              "keyboard":{"general":false,"shortcuts":false,"keys":false},
              "textInput":{"general":false,"paste":false,"delete":false},
              "clipboard":{"general":false,"copy":false,"cut":false},
              "radio":{"general":false,"change":false},
              "search-engine-body":{"general":false,"query":false,"result":false},
              "various":{"general":false,"selection":false,"unload":false,"focus&blur":false,"scroll":false,"resize":false}
            },
            "server_endpoint": "",
            "messages": ["You have already started this task without finishing it"]
          }
          EOF

          cat > data/build/task/workers.json <<'EOF'
          { "block": false, "blacklist": [], "whitelist": [], "blacklist_batches": [], "whitelist_batches": [] }
          EOF

          cat > data/build/config/admin.json <<'EOF'
          []
          EOF

      - name: Compute base href
        id: base
        shell: bash
        run: |
          TASK="${{ vars.TASK_NAME }}"
          BATCH="${{ vars.BATCH_NAME }}"
          : "${TASK:=task}"
          : "${BATCH:=batch}"
          echo "href=/${TASK}/${BATCH}/" >> "$GITHUB_OUTPUT"
          echo "Base href: /${TASK}/${BATCH}/"

      - name: Build (production, en-US)
        run: yarn ng build ${{ env.APP_NAME }} --configuration production --base-href "${{ steps.base.outputs.href }}"

      - name: Locate build output
        id: out
        shell: bash
        run: |
          ROOT="dist/${{ env.APP_NAME }}"
          for p in "$ROOT/en-US" "$ROOT/browser/en-US" "$ROOT/browser" "$ROOT"; do
            if [ -d "$p" ]; then echo "pack_dir=$p" >> "$GITHUB_OUTPUT"; echo "Using: $p"; break; fi
          done

      - name: Create ZIP
        if: ${{ steps.out.outputs.pack_dir }}
        shell: bash
        run: |
          mkdir -p release
          ZIP="release/${{ env.APP_NAME }}-v${{ steps.ver.outputs.version }}-en-US.zip"
          cd "${{ steps.out.outputs.pack_dir }}"
          zip -r "../../$ZIP" . >/dev/null
          cd - >/dev/null
          ls -lh "$ZIP"

      - name: Upload artifact (ZIP)
        if: ${{ steps.out.outputs.pack_dir }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-v${{ steps.ver.outputs.version }}-en-US
          path: release/${{ env.APP_NAME }}-v${{ steps.ver.outputs.version }}-en-US.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          merge-multiple: true

      - name: Derive version from tag
        id: ver
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: List assets
        run: ls -lh release-assets || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Crowd_Frame v${{ steps.ver.outputs.version }}
          generate_release_notes: true
          prerelease: ${{ contains(steps.ver.outputs.version, '-') }}
          fail_on_unmatched_files: false
          files: |
            release-assets/Crowd_Frame-v${{ steps.ver.outputs.version }}-en-US.zip
